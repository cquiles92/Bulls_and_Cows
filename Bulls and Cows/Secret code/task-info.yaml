type: edu
files:
- name: src/bullscows/Main.java
  visible: true
  text: |
    package bullscows;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.LinkedHashSet;
    import java.util.List;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    public class BullsCowsTest extends StageTest<String> {

        // basic test case
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("4").toLowerCase().trim();

            return outputCheck(output, 4);
        }

        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("1").toLowerCase().trim();

            return outputCheck(output, 1);
        }

        // test of incorrect input
        @DynamicTestingMethod
        CheckResult test4() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("11").toLowerCase().trim();

            return outputCheck(output, 11);
        }

        @DynamicTestingMethod
        CheckResult test5() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("6").toLowerCase().trim();

            return outputCheck(output, 6);
        }

        @DynamicTestingMethod
        CheckResult test6() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("3").toLowerCase().trim();

            return outputCheck(output, 3);
        }


        CheckResult outputCheck(String source, int length) {

            if (length > 10) {
                if (source.toLowerCase().contains("error")) {
                    return CheckResult.correct();
                } else {
                    return CheckResult.wrong("An error message expected with input " +
                            "\"" + length + "\"");
                }
            }

            List<Integer> integers = expect(source).toContain(1).integers();
            source = "" + integers.get(0);

            if (source.length() != length) {
                return CheckResult.wrong("The output number of your program has " +
                        "an incorrect length (found " + source.length() + ")");
            }

            List<Integer> temp = stringToArrayOfNumbers(source);
            temp = new ArrayList<>(new LinkedHashSet<>(temp));

            if (temp.toArray().length != source.length()) {
                return CheckResult.wrong("Digits in the generated number are not unique.");
            }

            return CheckResult.correct();
        }

        private static List<Integer> stringToArrayOfNumbers(String array) {
            return Arrays.stream(array.split(""))
                    .map(Integer::parseInt)
                    .collect(Collectors.toList());
        }
    }
  learner_created: false
- name: src/bullscows/Game.java
  visible: true
  text: |
    package bullscows;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Random;
    import java.util.Scanner;

    public class Game {
        private static final int SECRET_NUMBER = randomNumberGenerator();

        public static void printGame() {
            String secretCode = "****";
            int currentTurn = 0;
            int playerOneGuess = 1234;
            int playerTwoGuess = 9876;

            System.out.printf("The secret code is prepared: %s.\n", secretCode);
            System.out.println();

            System.out.printf("Turn %d. Answer: %d\n", ++currentTurn, playerOneGuess);
            grader();

            System.out.printf("Turn %d. Answer: %d\n", ++currentTurn, playerTwoGuess);
            grader();
        }

        private static void guessSecretCode(int secret, int playerGuess) {
            System.out.println(playerGuess);
            int bulls = 4;
            if (playerGuess == secret) {
                System.out.printf("Grade: %d bulls.\n", bulls);
                System.out.printf("Congrats! The secret code is %d.\n", secret);
            } else {
                System.out.println("Grade: None.");
            }
        }

        private static int randomNumberGenerator() {
            return new Random().nextInt(10000);
        }

        public static void grader() {
            Scanner scanner = new Scanner(System.in);
            int guessInput = Integer.parseInt(scanner.nextLine());
            if (guessInput < 0 || guessInput > 9999) {
                return;
            }
            int secretCopy = SECRET_NUMBER;
            int bulls = 0;
            int cows = 0;

            List<Integer> playerGuess = new ArrayList<>();
            List<Integer> secretCode = new ArrayList<>();

            for (int i = 3; i > -1; i--) {
                int divider = (int) Math.pow(10, i);
                playerGuess.add(guessInput / divider);
                secretCode.add(secretCopy / divider);
                guessInput %= divider;
                secretCopy %= divider;
            }

            for (int i = 0; i < playerGuess.size(); i++) {
                if (playerGuess.get(i).equals(secretCode.get(i))) {
                    bulls++;
                } else if (secretCode.contains(playerGuess.get(i))) {
                    cows++;
                }
            }
            StringBuilder secretString = new StringBuilder(String.valueOf(SECRET_NUMBER));
            while (secretString.length() < 4) {
                secretString.insert(0, 0);
            }

            if (bulls == 4) {
                System.out.printf("Grade: %d bull(s). The secret code is %s.\n", bulls, secretString);
            } else if (cows > 0 && bulls > 0) {
                System.out.printf("Grade: %d bull(s) and %d cow(s). The secret code is %s.\n", bulls, cows, secretString);
            } else if (cows > 0 && bulls == 0) {
                System.out.printf("Grade: %d cows(s). The secret code is %s.\n", cows, secretString);
            } else if (bulls > 0 && cows == 0) {
                System.out.printf("Grade: %d bull(s). The secret code is %s.\n", bulls, secretString);
            } else {
                System.out.printf("Grade: None. The secret code is %s.\n", secretString);
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5431#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 16 Apr 2022 10:38:30 UTC
record: 3
